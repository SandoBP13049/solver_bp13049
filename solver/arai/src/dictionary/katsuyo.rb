# -*- coding: utf-8 -*-
#$KCODE="u"
#coding:utf-8

module RS::Dictionary
  # 未定義な活用を表す例外
  class UndefinedKatsuyoException < Exception; end

  #
  # 語幹と活用形から、具体的な語形変化を得るクラス
  #
  # * 四段活用 {#yo_dan}
  # * 下一段活用 {#shimo_ichi_dan}
  # * 下二段活用 {#shimo_ni_dan}
  # * 上一段活用 {#kami_ichi_dan}
  # * 上二段活用 {#kami_ni_dan}
  # * ナ行変格活用 {#na_hen}
  # * ラ行変格活用 {#ra_hen}
  # * カ行変格活用 {#ka_hen}
  # * サ行変格活用 {#sa_hen}
  # * シク活用 {#shiku}
  # * ク活用 {#ku}
  # * ナリ活用 {#nari}
  # * タリ活用 {#tari}
  #
  # @note 四段活用、ナ行変格活用、ラ行変格活用の音便
  #  * 音便の可能性: 四段活用・ナ変活用・ラ変活用の連用形が「たり」「て」「たまふ」などに続くとき、ラ変型活用語の連体形が「べし」「めり」「なり」などに続くとき
  #  * イ音便: 「き・ぎ・し」が「い」となる。
  #  * ウ音便: 「ひ・び・み」が「う」となる。
  #  * 撥音便: 「に・び・み」が「ん」となる。「る」が「ん」となる。
  #  * 促音便: 「ち・ひ・り」が「つ」となる。
  #  (中村幸弘, 高橋宏幸, 碁石雅利. 駿台受験シリーズ「正しく読める古典文法」. 駿台文庫(2001). P24-P25 より)
  #
  # @note 形容詞活用(シク活用、ク活用)の音便
  #  * イ音便: 基本活用の連体形「-き・-しき」が「-い・-しい」となる。
  #  * ウ音便: 基本活用の連用形「-く・-しく」が「-う・-しう」となる。
  #  * 撥音便: 補助活用の連体形「-かる・-しかる」が「-かん・-しかん」となるが、その「ん」は表記されないことが多い。
  #  (中村幸弘, 高橋宏幸, 碁石雅利. 駿台受験シリーズ「正しく読める古典文法」. 駿台文庫(2001). P31-P32 より)
  #
  # @note 形容動詞活用(ナリ活用, タリ活用)の音便
  #  * 撥音便: 連体形「-なる」が助動詞「めり」「なり(推定・伝聞)」を接続するとき「-なん」となる。
  #  (中村幸弘, 高橋宏幸, 碁石雅利. 駿台受験シリーズ「正しく読める古典文法」. 駿台文庫(2001). P35 より)
  class Katsuyo
    # 四段活用の活用表
    YO_DAN = {
      "ア"=>{"未然形"=>["あ"], "連用形"=>["い"], "終止形"=>["う"], "連体形"=>["う"], "已然形"=>["え"], "命令形"=>["え"]},
      "カ"=>{"未然形"=>["か"], "連用形"=>["き", "い"], "終止形"=>["く"], "連体形"=>["く"], "已然形"=>["け"], "命令形"=>["け"]},
      "サ"=>{"未然形"=>["さ"], "連用形"=>["し", "い"], "終止形"=>["す"], "連体形"=>["す"], "已然形"=>["せ"], "命令形"=>["せ"]},
      "タ"=>{"未然形"=>["た"], "連用形"=>["ち", "つ"], "終止形"=>["つ"], "連体形"=>["つ"], "已然形"=>["て"], "命令形"=>["て"]},
      "ナ"=>{"未然形"=>["な"], "連用形"=>["に"], "終止形"=>["ぬ"], "連体形"=>["ぬ"], "已然形"=>["ね"], "命令形"=>["ね"]},
      "ハ"=>{"未然形"=>["は"], "連用形"=>["ひ", "う", "つ"], "終止形"=>["ふ"], "連体形"=>["ふ"], "已然形"=>["へ"], "命令形"=>["へ"]},
      "マ"=>{"未然形"=>["ま"], "連用形"=>["み", "ん"], "終止形"=>["む"], "連体形"=>["む"], "已然形"=>["め"], "命令形"=>["め"]},
      "ヤ"=>{"未然形"=>["や"], "連用形"=>["い"], "終止形"=>["ゆ"], "連体形"=>["ゆ"], "已然形"=>["え"], "命令形"=>["え"]},
      "ラ"=>{"未然形"=>["ら"], "連用形"=>["り", "つ"], "終止形"=>["る"], "連体形"=>["る"], "已然形"=>["れ"], "命令形"=>["れ"]},
      "ワ"=>{"未然形"=>["わ"], "連用形"=>["ゐ"], "終止形"=>["う"], "連体形"=>["う"], "已然形"=>["ゑ"], "命令形"=>["ゑ"]},
      "ガ"=>{"未然形"=>["が"], "連用形"=>["ぎ", "い"], "終止形"=>["ぐ"], "連体形"=>["ぐ"], "已然形"=>["げ"], "命令形"=>["げ"]},
      "ザ"=>{"未然形"=>["ざ"], "連用形"=>["じ"], "終止形"=>["ず"], "連体形"=>["ず"], "已然形"=>["ぜ"], "命令形"=>["ぜ"]},
      "バ"=>{"未然形"=>["ば"], "連用形"=>["び", "う", "ん"], "終止形"=>["ぶ"], "連体形"=>["ぶ"], "已然形"=>["べ"], "命令形"=>["べ"]},
      "パ"=>{"未然形"=>["ぱ"], "連用形"=>["ぴ"], "終止形"=>["ぷ"], "連体形"=>["ぷ"], "已然形"=>["ぺ"], "命令形"=>["ぺ"]}
    }

    # 下一段活用の活用表
    SHIMO_ICHI_DAN = {
      "カ"=>{"未然形"=>["け"], "連用形"=>["け"], "終止形"=>["ける"], "連体形"=>["ける"], "已然形"=>["けれ"], "命令形"=>["けよ"]}
    }

    # 下二段活用の活用表
    SHIMO_NI_DAN = {
      "ア"=>{"未然形"=>["え"], "連用形"=>["え"], "終止形"=>["う"], "連体形"=>["うる"], "已然形"=>["うれ"], "命令形"=>["えよ"]},
      "カ"=>{"未然形"=>["け"], "連用形"=>["け"], "終止形"=>["く"], "連体形"=>["くる"], "已然形"=>["くれ"], "命令形"=>["けよ"]},
      "サ"=>{"未然形"=>["せ"], "連用形"=>["せ"], "終止形"=>["す"], "連体形"=>["する"], "已然形"=>["すれ"], "命令形"=>["せよ"]},
      "タ"=>{"未然形"=>["て"], "連用形"=>["て"], "終止形"=>["つ"], "連体形"=>["つる"], "已然形"=>["つれ"], "命令形"=>["てよ"]},
      "ナ"=>{"未然形"=>["ね"], "連用形"=>["ね"], "終止形"=>["ぬ"], "連体形"=>["ぬる"], "已然形"=>["ねれ"], "命令形"=>["ねよ"]},
      "ハ"=>{"未然形"=>["へ"], "連用形"=>["へ"], "終止形"=>["ふ"], "連体形"=>["ふる"], "已然形"=>["ふれ"], "命令形"=>["へよ"]},
      "マ"=>{"未然形"=>["め"], "連用形"=>["め"], "終止形"=>["む"], "連体形"=>["むる"], "已然形"=>["むれ"], "命令形"=>["めよ"]},
      "ヤ"=>{"未然形"=>["え"], "連用形"=>["え"], "終止形"=>["ゆ"], "連体形"=>["ゆる"], "已然形"=>["ゆれ"], "命令形"=>["えよ"]},
      "ラ"=>{"未然形"=>["れ"], "連用形"=>["れ"], "終止形"=>["る"], "連体形"=>["るる"], "已然形"=>["るれ"], "命令形"=>["れよ"]},
      "ワ"=>{"未然形"=>["ゑ"], "連用形"=>["ゑ"], "終止形"=>["う"], "連体形"=>["うる"], "已然形"=>["うれ"], "命令形"=>["ゑよ"]},
      "ガ"=>{"未然形"=>["げ"], "連用形"=>["げ"], "終止形"=>["ぐ"], "連体形"=>["ぐる"], "已然形"=>["ぐれ"], "命令形"=>["げよ"]},
      "ザ"=>{"未然形"=>["ぜ"], "連用形"=>["ぜ"], "終止形"=>["ず"], "連体形"=>["ずる"], "已然形"=>["ずれ"], "命令形"=>["ぜよ"]},
      "バ"=>{"未然形"=>["べ"], "連用形"=>["べ"], "終止形"=>["ぶ"], "連体形"=>["ぶる"], "已然形"=>["ぶれ"], "命令形"=>["べよ"]},
      "パ"=>{"未然形"=>["ぺ"], "連用形"=>["ぺ"], "終止形"=>["ぷ"], "連体形"=>["ぷる"], "已然形"=>["ぷれ"], "命令形"=>["ぺよ"]}
    }

    # 上一段活用の活用表
    KAMI_ICHI_DAN = {
      "ア"=>{"未然形"=>["い"], "連用形"=>["い"], "終止形"=>["いる"], "連体形"=>["いる"], "已然形"=>["いれ"], "命令形"=>["いよ"]},
      "カ"=>{"未然形"=>["き"], "連用形"=>["き"], "終止形"=>["きる"], "連体形"=>["きる"], "已然形"=>["きれ"], "命令形"=>["きよ"]},
      "サ"=>{"未然形"=>["し"], "連用形"=>["し"], "終止形"=>["しる"], "連体形"=>["しる"], "已然形"=>["しれ"], "命令形"=>["しよ"]},
      "タ"=>{"未然形"=>["ち"], "連用形"=>["ち"], "終止形"=>["ちる"], "連体形"=>["ちる"], "已然形"=>["ちれ"], "命令形"=>["ちよ"]},
      "ナ"=>{"未然形"=>["に"], "連用形"=>["に"], "終止形"=>["にる"], "連体形"=>["にる"], "已然形"=>["にれ"], "命令形"=>["によ"]},
      "ハ"=>{"未然形"=>["ひ"], "連用形"=>["ひ"], "終止形"=>["ひる"], "連体形"=>["ひる"], "已然形"=>["ひれ"], "命令形"=>["ひよ"]},
      "マ"=>{"未然形"=>["み"], "連用形"=>["み"], "終止形"=>["みる"], "連体形"=>["みる"], "已然形"=>["みれ"], "命令形"=>["みよ"]},
      "ヤ"=>{"未然形"=>["い"], "連用形"=>["い"], "終止形"=>["いる"], "連体形"=>["いる"], "已然形"=>["いれ"], "命令形"=>["いよ"]},
      "ラ"=>{"未然形"=>["り"], "連用形"=>["り"], "終止形"=>["りる"], "連体形"=>["りる"], "已然形"=>["りれ"], "命令形"=>["りよ"]},
      "ワ"=>{"未然形"=>["ゐ"], "連用形"=>["ゐ"], "終止形"=>["ゐる"], "連体形"=>["ゐる"], "已然形"=>["ゐれ"], "命令形"=>["ゐよ"]},
      "ガ"=>{"未然形"=>["ぎ"], "連用形"=>["ぎ"], "終止形"=>["ぎる"], "連体形"=>["ぎる"], "已然形"=>["ぎれ"], "命令形"=>["ぎよ"]},
      "ザ"=>{"未然形"=>["じ"], "連用形"=>["じ"], "終止形"=>["じる"], "連体形"=>["じる"], "已然形"=>["じれ"], "命令形"=>["じよ"]},
      "バ"=>{"未然形"=>["び"], "連用形"=>["び"], "終止形"=>["びる"], "連体形"=>["びる"], "已然形"=>["びれ"], "命令形"=>["びよ"]},
      "パ"=>{"未然形"=>["ぴ"], "連用形"=>["ぴ"], "終止形"=>["ぴる"], "連体形"=>["ぴる"], "已然形"=>["ぴれ"], "命令形"=>["ぴよ"]}
    }


    # 上二段活用の活用表
    KAMI_NI_DAN = {
      "ア"=>{"未然形"=>["い"], "連用形"=>["い"], "終止形"=>["う"], "連体形"=>["うる"], "已然形"=>["うれ"], "命令形"=>["いよ"]},
      "カ"=>{"未然形"=>["き"], "連用形"=>["き"], "終止形"=>["く"], "連体形"=>["くる"], "已然形"=>["くれ"], "命令形"=>["きよ"]},
      "サ"=>{"未然形"=>["し"], "連用形"=>["し"], "終止形"=>["す"], "連体形"=>["する"], "已然形"=>["すれ"], "命令形"=>["しよ"]},
      "タ"=>{"未然形"=>["ち"], "連用形"=>["ち"], "終止形"=>["つ"], "連体形"=>["つる"], "已然形"=>["つれ"], "命令形"=>["ちよ"]},
      "ナ"=>{"未然形"=>["に"], "連用形"=>["に"], "終止形"=>["ぬ"], "連体形"=>["ぬる"], "已然形"=>["ぬれ"], "命令形"=>["によ"]},
      "ハ"=>{"未然形"=>["ひ"], "連用形"=>["ひ"], "終止形"=>["ふ"], "連体形"=>["ふる"], "已然形"=>["ふれ"], "命令形"=>["ひよ"]},
      "マ"=>{"未然形"=>["み"], "連用形"=>["み"], "終止形"=>["む"], "連体形"=>["むる"], "已然形"=>["むれ"], "命令形"=>["みよ"]},
      "ヤ"=>{"未然形"=>["い"], "連用形"=>["い"], "終止形"=>["ゆ"], "連体形"=>["ゆる"], "已然形"=>["ゆれ"], "命令形"=>["いよ"]},
      "ラ"=>{"未然形"=>["り"], "連用形"=>["り"], "終止形"=>["る"], "連体形"=>["るる"], "已然形"=>["るれ"], "命令形"=>["りよ"]},
      "ワ"=>{"未然形"=>["ゐ"], "連用形"=>["ゐ"], "終止形"=>["う"], "連体形"=>["うる"], "已然形"=>["うれ"], "命令形"=>["ゐよ"]},
      "ガ"=>{"未然形"=>["ぎ"], "連用形"=>["ぎ"], "終止形"=>["ぐ"], "連体形"=>["ぐる"], "已然形"=>["ぐれ"], "命令形"=>["ぎよ"]},
      "ザ"=>{"未然形"=>["じ"], "連用形"=>["じ"], "終止形"=>["ず"], "連体形"=>["ずる"], "已然形"=>["ずれ"], "命令形"=>["じよ"]},
      "バ"=>{"未然形"=>["び"], "連用形"=>["び"], "終止形"=>["ぶ"], "連体形"=>["ぶる"], "已然形"=>["ぶれ"], "命令形"=>["びよ"]},
      "パ"=>{"未然形"=>["ぴ"], "連用形"=>["ぴ"], "終止形"=>["ぷ"], "連体形"=>["ぷる"], "已然形"=>["ぷれ"], "命令形"=>["ぴよ"]}
    }

    #
    # 動詞
    #

    public
    # 四段活用
    #
    # @param [String] gyo 行
    # @param [String] gokan 語幹
    # @return [Hash{String=>Array<String>}] 活用形と活用結果の配列との対応
    # @example
    #  yo_dan("カ", "ほげ") #=> {"未然形"=>["ほげか"], "連用形"=>["ほげき", "ほげい"], "終止形"=>["ほげく"], "連体形"=>["ほげく"], "已然形"=>["ほげけ"], "命令形"=>["ほげけ"]}
    def yo_dan(gyo, gokan)
      if YO_DAN[gyo] == nil
        raise UndefinedKatsuyoException
      end
      result = {}
      YO_DAN[gyo].each {|kei,gobis|
        result[kei] = gobis.map {|gobi| "#{gokan}#{gobi}"}
      }
      return result
    end

    public
    # 下一段活用
    #
    # @param [String] gyo 行
    # @param [String] gokan 語幹
    # @return [Hash{String=>Array<String>}] 活用形と活用結果の配列との対応
    # @example
    #  shimo_ichi_dan("カ", "ほげ") #=> {"未然形"=>["ほげけ"], "連用形"=>["ほげけ"], "終止形"=>["ほげける"], "連体形"=>["ほげける"], "已然形"=>["ほげけれ"], "命令形"=>["ほげけよ"]}
    # @note カ行のみ
    def shimo_ichi_dan(gyo, gokan)
      if SHIMO_ICHI_DAN[gyo] == nil
        raise UndefinedKatsuyoException
      end
      result = {}
      SHIMO_ICHI_DAN[gyo].each {|kei,gobis|
        result[kei] = gobis.map {|gobi| "#{gokan}#{gobi}"}
      }
      return result
    end

    public
    # 下二段活用
    #
    # @param [String] gyo 行
    # @param [String] gokan 語幹
    # @return [Hash{String=>Array<String>}] 活用形と活用結果の配列との対応
    # @example
    #  shimo_ni_dan("カ", "ほげ") #=> {"未然形"=>["ほげけ"], "連用形"=>["ほげけ"], "終止形"=>["ほげく"], "連体形"=>["ほげくる"], "已然形"=>["ほげくれ"], "命令形"=>["ほげけよ"]}
    def shimo_ni_dan(gyo, gokan)
      if SHIMO_NI_DAN[gyo] == nil
        raise UndefinedKatsuyoException
      end
      result = {}
      SHIMO_NI_DAN[gyo].each {|kei,gobis|
        result[kei] = gobis.map {|gobi| "#{gokan}#{gobi}"}
      }
      return result
    end

    public
    # 上一段活用
    #
    # @param [String] gyo 行
    # @param [String] gokan 語幹
    # @return [Hash{String=>Array<String>}] 活用形と活用結果の配列との対応
    # @example
    #  kami_chi_dan("カ", "ほげ") #=> {"未然形"=>["ほげき"], "連用形"=>["ほげき"], "終止形"=>["ほげきる"], "連体形"=>["ほげきる"], "已然形"=>["ほげきれ"], "命令形"=>["ほげきよ"]}
    def kami_ichi_dan(gyo, gokan)
      if KAMI_ICHI_DAN[gyo] == nil
        raise UndefinedKatsuyoException
      end
      result = {}
      KAMI_ICHI_DAN[gyo].each {|kei,gobis|
        result[kei] = gobis.map {|gobi| "#{gokan}#{gobi}"}
      }
      return result
    end

    public
    # 上二段活用
    #
    # @param [String] gyo 行
    # @param [String] gokan 語幹
    # @return [Hash{String=>Array<String>}] 活用形と活用結果の配列との対応
    # @example
    #  kami_chi_dan("カ", "ほげ") #=> {"未然形"=>["ほげき"], "連用形"=>["ほげき"], "終止形"=>["ほげく"], "連体形"=>["ほげくる"], "已然形"=>["ほげくれ"], "命令形"=>["ほげきよ"]}
    def kami_ni_dan(gyo, gokan)
      if KAMI_NI_DAN[gyo] == nil
        raise UndefinedKatsuyoException
      end
      result = {}
      KAMI_NI_DAN[gyo].each {|kei,gobis|
        result[kei] = gobis.map {|gobi| "#{gokan}#{gobi}"}
      }
      return result
    end

    public
    # ナ行変格活用
    #
    # @param [String] gokan 語幹
    # @return [Hash{String=>Array<String>}] 活用形と活用結果の配列との対応
    # @example
    #  na_hen("ほげ") #=> {"未然形"=>["ほげな"], "連用形"=>["ほげに", "ほげん"], "終止形"=>["ほげぬ"], "連体形"=>["ほげぬる"], "已然形"=>["ほげぬれ"], "命令形"=>["ほげね"]}
    # @note 音便には未対応
    def na_hen(gokan)
      result = {
        "未然形"=>["#{gokan}な"],
        "連用形"=>["#{gokan}に", "#{gokan}ん"],
        "終止形"=>["#{gokan}ぬ"],
        "連体形"=>["#{gokan}ぬる"],
        "已然形"=>["#{gokan}ぬれ"],
        "命令形"=>["#{gokan}ね"]
      }
      return result
    end

    public
    # ラ行変格活用
    #
    # @param [String] gokan 語幹
    # @return [Hash{String=>Array<String>}] 活用形と活用結果の配列との対応
    # @example
    #  ra_hen("ほげ") #=> {"未然形"=>["ほげら"], "連用形"=>["ほげり", "ほげつ"], "終止形"=>["ほげり"], "連体形"=>["ほげる", "ほげん"], "已然形"=>["ほげれ"], "命令形"=>["ほげれ"]}
    # @note 音便には未対応
    def ra_hen(gokan)
      result = {
        "未然形"=>["#{gokan}ら"],
        "連用形"=>["#{gokan}り", "#{gokan}つ"],
        "終止形"=>["#{gokan}り"],
        "連体形"=>["#{gokan}る", "#{gokan}ん"],
        "已然形"=>["#{gokan}れ"],
        "命令形"=>["#{gokan}れ"]
      }
      return result
    end

    public
    # カ行変格活用
    #
    # @param [String] gokan 語幹
    # @return [Hash{String=>Array<String>}] 活用形と活用結果の配列との対応
    # @example
    #  ka_hen("ほげ") #=> {"未然形"=>["ほげこ"], "連用形"=>["ほげき"], "終止形"=>["ほげく"], "連体形"=>["ほげくる"], "已然形"=>["ほげくれ"], "命令形"=>["ほげこ", "ほげこよ"]}
    def ka_hen(gokan)
      result = {
        "未然形"=>["#{gokan}こ"],
        "連用形"=>["#{gokan}き"],
        "終止形"=>["#{gokan}く"],
        "連体形"=>["#{gokan}くる"],
        "已然形"=>["#{gokan}くれ"],
        "命令形"=>["#{gokan}こ", "#{gokan}こよ"]
      }
      return result
    end

    public
    # サ行変格活用
    #
    # @param [String] gokan 語幹
    # @return [Hash{String=>Array<String>}] 活用形と活用結果の配列との対応
    # @example
    #  ka_hen("ほげ") #=> {"未然形"=>["ほげせ"], "連用形"=>["ほげし"], "終止形"=>["ほげす"], "連体形"=>["ほげする"], "已然形"=>["ほげすれ"], "命令形"=>["ほげせよ"]}
    def sa_hen(gokan)
      result = {
        "未然形"=>["#{gokan}せ"],
        "連用形"=>["#{gokan}し"],
        "終止形"=>["#{gokan}す"],
        "連体形"=>["#{gokan}する"],
        "已然形"=>["#{gokan}すれ"],
        "命令形"=>["#{gokan}せよ"]
      }
      return result
    end

    public
    # シク活用
    #
    # @param [String] gokan 語幹
    # @return [Hash{String=>Array<String>}] 活用形と活用結果の配列との対応
    # @example
    #  shiku("ほげ") #=> {"未然形"=>["ほげしく", "ほげしから"], "連用形"=>["ほげしく", "ほげしかり", "ほげしう"], "終止形"=>["ほげし"],"連体形"=>["ほげしき", "ほげしかる", "ほげしい", "ほげしかん", "ほげしか" ], "已然形"=>["ほげしけれ"], "命令形"=>["ほげしかれ"]}
    def shiku(gokan)
      result = {
        "未然形"=>["#{gokan}しく", "#{gokan}しから"],
        "連用形"=>["#{gokan}しく", "#{gokan}しかり", "#{gokan}しう"],
        "終止形"=>["#{gokan}し"],
        "連体形"=>["#{gokan}しき", "#{gokan}しかる", "#{gokan}しい", "#{gokan}しかん", "#{gokan}しか" ],
        "已然形"=>["#{gokan}しけれ"],
        "命令形"=>["#{gokan}しかれ"]
      }
      return result
    end

    public
    # ク活用
    #
    # @param [String] gokan 語幹
    # @return [Hash{String=>Array<String>}] 活用形と活用結果の配列との対応
    # @example
    #  ku("ほげ") #=> {"未然形"=>["ほげく", "ほげから"], "連用形"=>["ほげく", "ほげかり"], "終止形"=>["ほげし"], "連体形"=>["ほげき", "ほげかる"], "已然形"=>["ほげけれ"], "命令形"=>["ほげかれ"]}
    def ku(gokan)
      result = {
        "未然形"=>["#{gokan}く", "#{gokan}から"],
        "連用形"=>["#{gokan}く", "#{gokan}かり"],
        "終止形"=>["#{gokan}し"],
        "連体形"=>["#{gokan}き", "#{gokan}かる"],
        "已然形"=>["#{gokan}けれ"], # かれ?
        "命令形"=>["#{gokan}かれ"]
      }
      return result
    end

    public
    # ナリ活用
    #
    # @param [String] gokan 語幹
    # @return [Hash{String=>Array<String>}] 活用形と活用結果の配列との対応
    # @example
    #  nari("ほげ") #=> {"未然形"=>["ほげなら"], "連用形"=>["ほげなり", "ほげに"], "終止形"=>["ほげなり"], "連体形"=>["ほげなる", "ほげなん"], "已然形"=>["ほげなれ"], "命令形"=>["ほげなれ"]}
    def nari(gokan)
      result = {
        "未然形"=>["#{gokan}なら"],
        "連用形"=>["#{gokan}なり", "#{gokan}に"],
        "終止形"=>["#{gokan}なり"],
        "連体形"=>["#{gokan}なる", "#{gokan}なん"],
        "已然形"=>["#{gokan}なれ"],
        "命令形"=>["#{gokan}なれ"]
      }
      return result
    end

    public
    # タリ活用
    #
    # @param [String] gokan 語幹
    # @return [Hash{String=>Array<String>}] 活用形と活用結果の配列との対応
    # @example
    #  tari("ほげ") #=> {"未然形"=>["ほげたら"], "連用形"=>["ほげたり", "ほげと"], "終止形"=>["ほげたり"], "連体形"=>["ほげたる"], "已然形"=>["ほげたれ"], "命令形"=>["ほげたれ"]}
    def tari(gokan)
      result = {
        "未然形"=>["#{gokan}たら"],
        "連用形"=>["#{gokan}たり", "#{gokan}と"],
        "終止形"=>["#{gokan}たり"],
        "連体形"=>["#{gokan}たる"],
        "已然形"=>["#{gokan}たれ"],
        "命令形"=>["#{gokan}たれ"]
      }
      return result
    end
  end

end # end of the module Dictionary
